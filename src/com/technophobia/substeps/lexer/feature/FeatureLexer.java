/* The following code was generated by JFlex 1.4.3 on 23/06/14 12:08 */

package com.technophobia.substeps.lexer.feature;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.technophobia.substeps.psi.feature.FeatureTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23/06/14 12:08 from the specification file
 * <tt>/home/sforbes/checkouts/personal/substeps/idea/substeps-idea/src/com/technophobia/substeps/lexer/feature/Feature.flex</tt>
 */
public class FeatureLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CREATING_EXAMPLES_VALUES = 22;
  public static final int CREATING_BACKGROUND_STEPS = 6;
  public static final int CREATING_SCENARIO_STEPS = 12;
  public static final int CREATING_SCENARIO_TEXT = 10;
  public static final int CREATING_SCENARIO_OUTLINE_TEXT = 14;
  public static final int CREATING_FEATURE_TEXT = 2;
  public static final int CREATING_SCENARIO_OUTLINE_STEPS = 16;
  public static final int CREATING_EXAMPLES = 18;
  public static final int CREATING_TAGS_TEXT = 8;
  public static final int YYINITIAL = 0;
  public static final int CREATING_EXAMPLES_TITLES = 20;
  public static final int CREATING_BACKGROUND_TEXT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\2\1\0\1\5\1\1\22\0\1\3\1\40\1\0"+
    "\1\40\26\0\1\15\7\0\1\16\2\0\1\33\1\7\10\0\1\31"+
    "\3\0\1\27\1\25\7\0\1\4\4\0\1\11\1\0\1\17\1\24"+
    "\1\10\1\0\1\21\1\0\1\30\1\0\1\20\1\32\1\35\1\23"+
    "\1\22\1\36\1\0\1\14\1\26\1\12\1\13\2\0\1\34\3\0"+
    "\1\37\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\1\3\2\4\1\5\5\3\1\6"+
    "\1\7\2\10\1\11\1\3\1\11\2\7\1\12\2\13"+
    "\1\14\1\3\1\14\2\12\1\15\1\16\1\17\1\20"+
    "\1\3\1\20\1\21\2\22\1\23\1\3\1\23\2\21"+
    "\1\23\1\24\1\25\2\26\1\27\1\3\1\27\2\25"+
    "\1\30\1\31\2\32\2\33\1\1\1\34\2\33\1\2"+
    "\1\35\1\36\6\0\2\37\2\7\2\40\1\0\3\12"+
    "\1\41\1\0\1\41\1\0\1\17\1\0\3\21\1\42"+
    "\1\0\1\42\1\0\3\25\1\43\1\0\1\43\7\0"+
    "\1\7\2\12\1\41\2\21\1\42\2\25\1\43\1\34"+
    "\1\35\5\0\1\7\2\12\2\21\2\25\2\0\1\44"+
    "\2\0\1\7\1\44\1\12\1\44\1\21\1\44\1\25"+
    "\4\0\1\7\1\12\1\21\1\25\4\0\1\7\1\12"+
    "\1\21\1\25\1\45\3\0\1\7\1\12\1\21\1\25"+
    "\2\0\1\46\1\47\1\12\1\46\1\21\1\46\1\25"+
    "\1\46\2\0\1\12\1\21\1\25\1\50\1\0\1\12"+
    "\1\21\1\25\1\0\1\12\1\21\1\25\1\0\1\12"+
    "\1\21\1\25\1\0\1\12\1\21\1\25\1\0\1\12"+
    "\1\21\1\25\1\0\1\12\1\21\1\25\4\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347"+
    "\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u018c\0\u01ce"+
    "\0\u01ef\0\u0210\0\u0231\0\u0252\0\u0273\0\u0294\0\u02b5\0\u02d6"+
    "\0\u02f7\0\u0318\0\u0339\0\u035a\0\u037b\0\u039c\0\u03bd\0\u03de"+
    "\0\u018c\0\u03ff\0\u0420\0\u0441\0\u0462\0\u0483\0\u04a4\0\u04c5"+
    "\0\u04e6\0\u0507\0\u0528\0\u0549\0\u056a\0\u058b\0\u018c\0\u05ac"+
    "\0\u05cd\0\u05ee\0\u060f\0\u0630\0\u0651\0\u0672\0\u0693\0\u06b4"+
    "\0\u018c\0\u06d5\0\u06f6\0\u0717\0\u0738\0\u0759\0\u077a\0\u079b"+
    "\0\u07bc\0\u018c\0\u07dd\0\u018c\0\u07fe\0\u081f\0\u0840\0\u0861"+
    "\0\u0882\0\u08a3\0\u08c4\0\u08e5\0\u0906\0\u0927\0\u0948\0\u0969"+
    "\0\u0339\0\u098a\0\u018c\0\u09ab\0\u09cc\0\u09ed\0\u0a0e\0\u0420"+
    "\0\u0a2f\0\u0a50\0\u0a71\0\u0a92\0\u0ab3\0\u0ad4\0\u0528\0\u0af5"+
    "\0\u05cd\0\u0b16\0\u0b37\0\u0b58\0\u0b79\0\u0b9a\0\u0bbb\0\u06f6"+
    "\0\u0bdc\0\u0bfd\0\u0c1e\0\u0c3f\0\u0c60\0\u0c81\0\u0ca2\0\u0cc3"+
    "\0\u0ce4\0\u0d05\0\u0d26\0\u0d47\0\u0d68\0\u0d89\0\u0daa\0\u0dcb"+
    "\0\u0dec\0\u0e0d\0\u0e2e\0\u0e4f\0\u0e70\0\u0e91\0\u0eb2\0\u0ed3"+
    "\0\u0ef4\0\u0f15\0\u0f36\0\u0f57\0\u0f78\0\u0f99\0\u0fba\0\u0fdb"+
    "\0\u0ffc\0\u101d\0\u103e\0\u105f\0\u1080\0\u10a1\0\u10c2\0\u018c"+
    "\0\u10e3\0\u1104\0\u1125\0\u03bd\0\u1146\0\u056a\0\u1167\0\u0693"+
    "\0\u1188\0\u11a9\0\u11ca\0\u11eb\0\u120c\0\u122d\0\u124e\0\u126f"+
    "\0\u1290\0\u12b1\0\u12d2\0\u12f3\0\u1314\0\u1335\0\u1356\0\u1377"+
    "\0\u1398\0\u018c\0\u13b9\0\u13da\0\u13fb\0\u141c\0\u143d\0\u145e"+
    "\0\u147f\0\u14a0\0\u14c1\0\u018c\0\u018c\0\u14e2\0\u03bd\0\u1503"+
    "\0\u056a\0\u1524\0\u0693\0\u1545\0\u1566\0\u1587\0\u15a8\0\u15c9"+
    "\0\u018c\0\u15ea\0\u160b\0\u162c\0\u164d\0\u166e\0\u168f\0\u16b0"+
    "\0\u16d1\0\u16f2\0\u1713\0\u1734\0\u1755\0\u1776\0\u1797\0\u17b8"+
    "\0\u17d9\0\u17fa\0\u181b\0\u183c\0\u185d\0\u187e\0\u189f\0\u18c0"+
    "\0\u18e1\0\u018c\0\u03bd\0\u056a\0\u0693";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\20\1\15\2\20\1\21\6\15"+
    "\1\22\6\15\1\23\1\15\1\24\3\15\1\25\4\15"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\32\1\34"+
    "\20\27\1\35\10\27\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\42\1\44\16\37\1\45\1\37\1\46\11\37"+
    "\1\15\1\40\1\41\1\47\1\15\2\47\16\15\1\23"+
    "\1\15\1\24\10\15\1\50\1\51\1\16\1\17\1\52"+
    "\1\53\1\52\1\54\32\51\1\55\1\56\1\57\1\60"+
    "\1\61\1\60\1\62\16\55\1\63\1\55\1\64\11\55"+
    "\1\15\1\56\1\57\1\65\1\15\2\65\16\15\1\23"+
    "\1\15\1\24\10\15\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\72\1\74\16\67\1\75\1\67\1\76\11\67"+
    "\1\15\1\70\1\71\1\77\1\15\2\77\16\15\1\23"+
    "\1\15\1\24\3\15\1\25\4\15\1\100\1\15\1\101"+
    "\1\102\1\20\1\15\2\20\33\15\1\103\1\104\1\105"+
    "\1\15\2\105\30\15\1\106\2\15\1\107\1\110\1\111"+
    "\1\15\2\111\16\15\1\23\1\15\1\24\7\15\1\112"+
    "\1\113\43\0\1\17\41\0\1\20\1\0\2\20\42\0"+
    "\1\114\41\0\1\115\40\0\1\116\46\0\1\117\55\0"+
    "\1\120\4\0\1\26\2\0\36\26\1\27\2\0\1\27"+
    "\1\121\1\0\33\27\1\0\1\122\1\31\37\0\1\122"+
    "\1\123\41\0\1\32\1\0\2\32\32\0\1\27\1\124"+
    "\40\27\2\0\1\34\1\121\1\32\1\34\33\27\2\0"+
    "\1\27\1\121\1\0\11\27\1\125\21\27\1\36\2\0"+
    "\1\36\1\126\1\127\33\36\1\37\2\0\1\37\1\130"+
    "\1\0\33\37\2\0\1\41\41\0\1\42\1\0\2\42"+
    "\32\0\1\37\1\131\40\37\2\0\1\44\1\130\1\42"+
    "\1\44\33\37\2\0\1\37\1\130\1\0\3\37\1\132"+
    "\30\37\2\0\1\37\1\130\1\0\11\37\1\133\21\37"+
    "\1\134\2\0\1\47\1\135\1\47\1\136\32\134\1\50"+
    "\2\0\36\50\1\51\2\0\1\51\1\137\1\0\33\51"+
    "\3\0\1\52\1\0\2\52\32\0\1\51\1\140\40\51"+
    "\2\0\1\54\1\137\1\52\1\54\32\51\1\55\2\0"+
    "\1\55\1\141\1\0\33\55\2\0\1\57\41\0\1\60"+
    "\1\0\2\60\32\0\1\55\1\142\40\55\2\0\1\62"+
    "\1\141\1\60\1\62\33\55\2\0\1\55\1\141\1\0"+
    "\3\55\1\143\30\55\2\0\1\55\1\141\1\0\11\55"+
    "\1\144\21\55\1\145\2\0\1\65\1\146\1\65\1\147"+
    "\32\145\1\66\2\0\36\66\1\67\2\0\1\67\1\150"+
    "\1\0\33\67\2\0\1\71\41\0\1\72\1\0\2\72"+
    "\32\0\1\67\1\151\40\67\2\0\1\74\1\150\1\72"+
    "\1\74\33\67\2\0\1\67\1\150\1\0\3\67\1\152"+
    "\30\67\2\0\1\67\1\150\1\0\11\67\1\153\21\67"+
    "\1\154\2\0\1\77\1\155\1\77\1\156\32\154\1\100"+
    "\2\0\36\100\2\0\1\102\40\0\1\104\41\0\1\105"+
    "\1\0\2\105\32\0\1\106\2\0\1\106\1\157\1\0"+
    "\33\106\1\0\1\16\1\110\37\0\1\16\1\17\41\0"+
    "\1\111\1\0\2\111\32\0\1\112\2\0\1\112\1\160"+
    "\1\0\33\112\1\113\2\0\36\113\11\0\1\161\46\0"+
    "\1\162\42\0\1\163\27\0\1\164\41\0\1\165\31\0"+
    "\1\123\36\0\1\27\1\0\2\27\1\121\1\0\34\27"+
    "\2\0\1\27\1\121\1\0\2\27\1\166\30\27\1\36"+
    "\1\124\1\27\36\36\1\127\2\0\36\127\1\37\1\0"+
    "\2\37\1\130\1\0\34\37\2\0\1\37\1\130\1\0"+
    "\13\37\1\167\20\37\2\0\1\37\1\130\1\0\2\37"+
    "\1\170\30\37\1\134\2\0\1\134\1\135\1\0\34\134"+
    "\1\171\40\134\2\0\1\136\1\135\1\47\1\136\32\134"+
    "\1\51\1\0\2\51\1\137\1\0\33\51\1\55\1\0"+
    "\2\55\1\141\1\0\34\55\2\0\1\55\1\141\1\0"+
    "\13\55\1\172\20\55\2\0\1\55\1\141\1\0\2\55"+
    "\1\173\30\55\1\145\2\0\1\145\1\146\1\0\34\145"+
    "\1\174\40\145\2\0\1\147\1\146\1\65\1\147\32\145"+
    "\1\67\1\0\2\67\1\150\1\0\34\67\2\0\1\67"+
    "\1\150\1\0\13\67\1\175\20\67\2\0\1\67\1\150"+
    "\1\0\2\67\1\176\30\67\1\154\2\0\1\154\1\155"+
    "\1\0\34\154\1\177\40\154\2\0\1\156\1\155\1\77"+
    "\1\156\32\154\1\106\1\200\37\106\1\112\1\201\37\112"+
    "\12\0\1\202\46\0\1\203\46\0\1\204\35\0\1\205"+
    "\52\0\1\206\3\0\1\27\2\0\1\27\1\121\1\0"+
    "\15\27\1\207\15\27\1\37\2\0\1\37\1\130\1\0"+
    "\20\37\1\210\13\37\2\0\1\37\1\130\1\0\15\37"+
    "\1\211\15\37\1\134\1\0\2\134\1\135\1\0\33\134"+
    "\1\55\2\0\1\55\1\141\1\0\20\55\1\212\13\55"+
    "\2\0\1\55\1\141\1\0\15\55\1\213\15\55\1\145"+
    "\1\0\2\145\1\146\1\0\33\145\1\67\2\0\1\67"+
    "\1\150\1\0\20\67\1\214\13\67\2\0\1\67\1\150"+
    "\1\0\15\67\1\215\15\67\1\154\1\0\2\154\1\155"+
    "\1\0\33\154\1\106\1\0\2\106\1\157\1\0\33\106"+
    "\1\112\1\0\2\112\1\160\1\0\33\112\13\0\1\216"+
    "\46\0\1\217\34\0\1\220\34\0\1\221\65\0\1\222"+
    "\2\0\1\27\2\0\1\27\1\121\1\0\3\27\1\223"+
    "\27\27\1\37\2\0\1\37\1\130\1\0\7\37\1\224"+
    "\24\37\2\0\1\37\1\130\1\0\3\37\1\225\27\37"+
    "\1\55\2\0\1\55\1\141\1\0\7\55\1\226\24\55"+
    "\2\0\1\55\1\141\1\0\3\55\1\227\27\55\1\67"+
    "\2\0\1\67\1\150\1\0\7\67\1\230\24\67\2\0"+
    "\1\67\1\150\1\0\3\67\1\231\27\67\14\0\1\232"+
    "\40\0\1\233\40\0\1\234\56\0\1\235\6\0\1\27"+
    "\2\0\1\27\1\121\1\0\6\27\1\236\24\27\1\37"+
    "\2\0\1\37\1\130\1\0\6\37\1\237\24\37\1\55"+
    "\2\0\1\55\1\141\1\0\6\55\1\240\24\55\1\67"+
    "\2\0\1\67\1\150\1\0\6\67\1\241\24\67\10\0"+
    "\1\242\52\0\1\243\46\0\1\244\20\0\1\245\30\0"+
    "\1\27\2\0\1\27\1\121\1\0\22\27\1\246\10\27"+
    "\1\37\2\0\1\37\1\130\1\0\22\37\1\247\10\37"+
    "\1\55\2\0\1\55\1\141\1\0\22\55\1\250\10\55"+
    "\1\67\2\0\1\67\1\150\1\0\22\67\1\251\10\67"+
    "\15\0\1\252\36\0\1\253\47\0\1\254\44\0\1\255"+
    "\12\0\1\27\2\0\1\27\1\121\1\0\14\27\1\256"+
    "\16\27\1\37\2\0\1\37\1\130\1\0\14\37\1\257"+
    "\16\37\1\55\2\0\1\55\1\141\1\0\14\55\1\260"+
    "\16\55\1\67\2\0\1\67\1\150\1\0\14\67\1\261"+
    "\16\67\23\0\1\262\20\0\1\263\1\0\2\263\6\0"+
    "\1\264\40\0\1\265\23\0\1\27\2\0\1\27\1\121"+
    "\1\263\33\27\1\37\2\0\1\266\1\130\1\263\1\266"+
    "\6\37\1\267\23\37\1\55\2\0\1\270\1\141\1\263"+
    "\1\270\6\55\1\271\23\55\1\67\2\0\1\272\1\150"+
    "\1\263\1\272\6\67\1\273\23\67\24\0\1\274\45\0"+
    "\1\275\7\0\1\37\2\0\1\37\1\130\1\0\23\37"+
    "\1\276\7\37\1\55\2\0\1\55\1\141\1\0\23\55"+
    "\1\277\7\55\1\67\2\0\1\67\1\150\1\0\23\67"+
    "\1\300\7\67\15\0\1\301\36\0\1\302\25\0\1\37"+
    "\2\0\1\37\1\130\1\0\5\37\1\303\25\37\1\55"+
    "\2\0\1\55\1\141\1\0\5\55\1\304\25\55\1\67"+
    "\2\0\1\67\1\150\1\0\5\67\1\305\25\67\12\0"+
    "\1\306\26\0\1\37\2\0\1\37\1\130\1\0\4\37"+
    "\1\307\26\37\1\55\2\0\1\55\1\141\1\0\4\55"+
    "\1\310\26\55\1\67\2\0\1\67\1\150\1\0\4\67"+
    "\1\311\26\67\32\0\1\312\6\0\1\37\2\0\1\37"+
    "\1\130\1\0\24\37\1\313\6\37\1\55\2\0\1\55"+
    "\1\141\1\0\24\55\1\314\6\55\1\67\2\0\1\67"+
    "\1\150\1\0\24\67\1\315\6\67\30\0\1\316\10\0"+
    "\1\37\2\0\1\37\1\130\1\0\22\37\1\317\10\37"+
    "\1\55\2\0\1\55\1\141\1\0\22\55\1\320\10\55"+
    "\1\67\2\0\1\67\1\150\1\0\22\67\1\321\10\67"+
    "\23\0\1\322\15\0\1\37\2\0\1\37\1\130\1\0"+
    "\15\37\1\323\15\37\1\55\2\0\1\55\1\141\1\0"+
    "\15\55\1\324\15\55\1\67\2\0\1\67\1\150\1\0"+
    "\15\67\1\325\15\67\10\0\1\326\30\0\1\37\2\0"+
    "\1\37\1\130\1\0\2\37\1\327\30\37\1\55\2\0"+
    "\1\55\1\141\1\0\2\55\1\330\30\55\1\67\2\0"+
    "\1\67\1\150\1\0\2\67\1\331\30\67\15\0\1\332"+
    "\23\0\1\37\2\0\1\37\1\130\1\0\7\37\1\333"+
    "\23\37\1\55\2\0\1\55\1\141\1\0\7\55\1\334"+
    "\23\55\1\67\2\0\1\67\1\150\1\0\7\67\1\335"+
    "\23\67";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6402];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\2\1\1\11\1\1\1\11\21\1\1\11\15\1"+
    "\1\11\11\1\1\11\10\1\1\11\1\1\1\11\7\1"+
    "\6\0\1\1\1\11\4\1\1\0\4\1\1\0\1\1"+
    "\1\0\1\1\1\0\4\1\1\0\1\1\1\0\4\1"+
    "\1\0\1\1\7\0\14\1\5\0\7\1\2\0\1\11"+
    "\2\0\7\1\4\0\4\1\4\0\4\1\1\11\3\0"+
    "\4\1\2\0\2\11\6\1\2\0\3\1\1\11\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[221];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  public FeatureLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public FeatureLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 104) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { yybegin(CREATING_EXAMPLES_TITLES); return FeatureTypes.EXAMPLE_TITLE_ROW;
          }
        case 42: break;
        case 26: 
          { yybegin(CREATING_EXAMPLES_TITLES); return FeatureTypes.CRLF;
          }
        case 43: break;
        case 29: 
          { yybegin(CREATING_EXAMPLES_VALUES); return FeatureTypes.EXAMPLE_VALUE_ROW;
          }
        case 44: break;
        case 35: 
          { yybegin(CREATING_SCENARIO_OUTLINE_STEPS); return FeatureTypes.SCENARIO_OUTLINE_STEP;
          }
        case 45: break;
        case 4: 
          { yybegin(YYINITIAL); return FeatureTypes.CRLF;
          }
        case 46: break;
        case 19: 
          { yybegin(CREATING_SCENARIO_TEXT); return TokenType.WHITE_SPACE;
          }
        case 47: break;
        case 2: 
          { yybegin(CREATING_EXAMPLES_VALUES); return TokenType.WHITE_SPACE;
          }
        case 48: break;
        case 14: 
          { yybegin(CREATING_BACKGROUND_STEPS); return FeatureTypes.COMMENT;
          }
        case 49: break;
        case 21: 
          { yybegin(CREATING_SCENARIO_OUTLINE_STEPS); return FeatureTypes.SCENARIO_OUTLINE_TEXT;
          }
        case 50: break;
        case 32: 
          { yybegin(CREATING_FEATURE_TEXT); return FeatureTypes.COMMENT;
          }
        case 51: break;
        case 37: 
          { yybegin(CREATING_FEATURE_TEXT); return FeatureTypes.FEATURE_LABEL;
          }
        case 52: break;
        case 1: 
          { yybegin(CREATING_EXAMPLES_TITLES); return TokenType.WHITE_SPACE;
          }
        case 53: break;
        case 38: 
          { yybegin(CREATING_SCENARIO_TEXT); return FeatureTypes.SCENARIO_LABEL;
          }
        case 54: break;
        case 15: 
          { yybegin(YYINITIAL); return FeatureTypes.TAGS_TEXT;
          }
        case 55: break;
        case 9: 
          { yybegin(CREATING_FEATURE_TEXT); return TokenType.WHITE_SPACE;
          }
        case 56: break;
        case 18: 
          { yybegin(CREATING_SCENARIO_STEPS); return FeatureTypes.CRLF;
          }
        case 57: break;
        case 25: 
          { yybegin(CREATING_SCENARIO_OUTLINE_STEPS); return FeatureTypes.COMMENT;
          }
        case 58: break;
        case 16: 
          { yybegin(CREATING_TAGS_TEXT); return TokenType.WHITE_SPACE;
          }
        case 59: break;
        case 27: 
          { yybegin(CREATING_EXAMPLES_VALUES); return FeatureTypes.CRLF;
          }
        case 60: break;
        case 8: 
          { yybegin(CREATING_FEATURE_TEXT); return FeatureTypes.CRLF;
          }
        case 61: break;
        case 31: 
          { yybegin(YYINITIAL); return FeatureTypes.BACKGROUND_LABEL;
          }
        case 62: break;
        case 20: 
          { yybegin(CREATING_SCENARIO_STEPS); return FeatureTypes.COMMENT;
          }
        case 63: break;
        case 11: 
          { yybegin(CREATING_BACKGROUND_STEPS); return FeatureTypes.CRLF;
          }
        case 64: break;
        case 40: 
          { yybegin(CREATING_BACKGROUND_TEXT); return FeatureTypes.BACKGROUND_LABEL;
          }
        case 65: break;
        case 5: 
          { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
          }
        case 66: break;
        case 3: 
          { return TokenType.BAD_CHARACTER;
          }
        case 67: break;
        case 24: 
          { yybegin(CREATING_SCENARIO_OUTLINE_STEPS); return TokenType.WHITE_SPACE;
          }
        case 68: break;
        case 41: 
          { yybegin(CREATING_SCENARIO_OUTLINE_TEXT); return FeatureTypes.SCENARIO_OUTLINE_LABEL;
          }
        case 69: break;
        case 22: 
          { yybegin(CREATING_SCENARIO_OUTLINE_STEPS); return FeatureTypes.CRLF;
          }
        case 70: break;
        case 7: 
          { yybegin(CREATING_FEATURE_TEXT); return FeatureTypes.FEATURE_TEXT;
          }
        case 71: break;
        case 13: 
          { yybegin(CREATING_BACKGROUND_STEPS); return TokenType.WHITE_SPACE;
          }
        case 72: break;
        case 12: 
          { yybegin(CREATING_BACKGROUND_TEXT); return TokenType.WHITE_SPACE;
          }
        case 73: break;
        case 36: 
          { yybegin(CREATING_TAGS_TEXT); return FeatureTypes.TAGS_LABEL;
          }
        case 74: break;
        case 34: 
          { yybegin(CREATING_SCENARIO_STEPS); return FeatureTypes.SCENARIO_STEP;
          }
        case 75: break;
        case 6: 
          { yybegin(YYINITIAL); return FeatureTypes.COMMENT;
          }
        case 76: break;
        case 17: 
          { yybegin(CREATING_SCENARIO_STEPS); return FeatureTypes.SCENARIO_TEXT;
          }
        case 77: break;
        case 30: 
          { yybegin(CREATING_EXAMPLES_VALUES); return FeatureTypes.COMMENT;
          }
        case 78: break;
        case 33: 
          { yybegin(CREATING_BACKGROUND_STEPS); return FeatureTypes.BACKGROUND_STEP;
          }
        case 79: break;
        case 39: 
          { yybegin(CREATING_EXAMPLES); return FeatureTypes.EXAMPLE;
          }
        case 80: break;
        case 10: 
          { yybegin(CREATING_BACKGROUND_STEPS); return FeatureTypes.BACKGROUND_TEXT;
          }
        case 81: break;
        case 23: 
          { yybegin(CREATING_SCENARIO_OUTLINE_TEXT); return TokenType.WHITE_SPACE;
          }
        case 82: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
